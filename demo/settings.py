"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cr$fcsc+!1x(%os08-7g$wn_+*%*pm0j3m!i-a3rl^djkfq#gv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'booking.apps.BookingConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # テンプレートディレクトリのパスを指定
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': "demo",
        'USER': "postgres",
        'PASSWORD': "admin",
       # "HOST":"172.31.48.1",
        "PORT":"5432",
        "OPTIONS": {
            'options': '-c search_path=bookings'
    },
}
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    '127.0.0.1',
    # Docker環境などで異なるIPになる場合は、そのIPも追加
    # 'your_docker_host_ip',
]

STATICFILES_DIRS = [
    BASE_DIR / "static",
]


import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # これが True だと問題が起きやすい
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} [{name}] {message}', # {name} を追加するとロガー名がわかる
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # ハンドラのレベルをDEBUGにしてみる (問題切り分けのため)
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # または 'verbose'
        },
        # ファイルに出力したい場合
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': os.path.join(BASE_DIR, 'app.log'), # BASE_DIR が定義されていること
        #     'formatter': 'verbose',
        # },
    },
    'root': { # ルートロガー: 全てのロガーの基本設定
        'handlers': ['console'], # ここに 'file' も追加可能
        'level': 'DEBUG', # ルートロガーのレベル
    },
    'loggers': {
        'django': { # Django自体のログ設定
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), # 環境変数で変更可能にする例
            'propagate': False, # Djangoのログがルートに行かないようにする
        },
        # --- ここからが重要 ---
        'your_app_name': { # logger = logging.getLogger('your_app_name.views') の 'your_app_name' 部分
            'handlers': ['console'], # または ['console', 'file']
            'level': 'DEBUG', # INFOログを見たいので、DEBUGかINFOに設定
            'propagate': False, # このロガーのログを上位(root)に伝播させない場合
        },
        # もし logger = logging.getLogger(__name__) を使っていて、
        # ビューが 'your_app_name.views' というモジュールにあるなら、上記のように設定するか、
        # より具体的に 'your_app_name.views' という名前でロガーを設定します。
        # 'your_app_name.views': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
    },
}